#!/bin/bash

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configuration paths
CONFIG_DIR="/etc/udp"
SERVICE_NAME="udp-custom"
LOGS_FILE="/var/log/udp-custom.log"
BINARY_PATH="/usr/local/bin/udp-custom"

# Add service verification
verify_installation() {
    if [ ! -f "$BINARY_PATH" ]; then
        echo -e "${RED}Error: UDP Custom binary not found!${NC}"
        exit 1
    fi
    
    if [ ! -f "/etc/systemd/system/$SERVICE_NAME.service" ]; then
        echo -e "${RED}Error: Service file not found!${NC}"
        exit 1
    }
    
    if [ ! -f "$CONFIG_DIR/config.json" ]; then
        echo -e "${RED}Error: Configuration file not found!${NC}"
        exit 1
    }
}

# Banner
show_banner() {
    clear
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "                UDP Custom Manager by Abdofaiz"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}Error: This script must be run as root!${NC}"
        exit 1
    fi
}

# Service status with enhanced checking
check_status() {
    verify_installation
    
    echo -e "Checking UDP Custom service status..."
    echo -e "----------------------------------------"
    
    # Check binary
    echo -e "Binary: $(if [ -f "$BINARY_PATH" ]; then echo -e "${GREEN}Found${NC}"; else echo -e "${RED}Not Found${NC}"; fi)"
    
    # Check configuration
    echo -e "Config: $(if [ -f "$CONFIG_DIR/config.json" ]; then echo -e "${GREEN}Found${NC}"; else echo -e "${RED}Not Found${NC}"; fi)"
    
    # Check service status
    if systemctl is-active --quiet $SERVICE_NAME; then
        echo -e "Service: ${GREEN}Running${NC}"
        echo -e "Port: $(grep -oP '"listen": ":\K[0-9]+' $CONFIG_DIR/config.json)"
        echo -e "Process: $(ps aux | grep udp-custom | grep -v grep)"
    else
        echo -e "Service: ${RED}Not Running${NC}"
        echo -e "Last logs:"
        journalctl -u $SERVICE_NAME -n 5 --no-pager
    fi
}

# Enhanced start service
start_service() {
    verify_installation
    echo -e "Starting UDP Custom service..."
    systemctl start $SERVICE_NAME
    sleep 2
    if ! systemctl is-active --quiet $SERVICE_NAME; then
        echo -e "${RED}Failed to start service. Checking logs:${NC}"
        journalctl -u $SERVICE_NAME -n 10 --no-pager
    else
        echo -e "${GREEN}Service started successfully${NC}"
    fi
    check_status
}

# Enhanced stop service
stop_service() {
    echo -e "Stopping UDP Custom service..."
    systemctl stop $SERVICE_NAME
    sleep 2
    if systemctl is-active --quiet $SERVICE_NAME; then
        echo -e "${RED}Failed to stop service${NC}"
    else
        echo -e "${GREEN}Service stopped successfully${NC}"
    fi
    check_status
}

# Enhanced restart service
restart_service() {
    echo -e "Restarting UDP Custom service..."
    systemctl restart $SERVICE_NAME
    sleep 2
    if ! systemctl is-active --quiet $SERVICE_NAME; then
        echo -e "${RED}Failed to restart service. Checking logs:${NC}"
        journalctl -u $SERVICE_NAME -n 10 --no-pager
    else
        echo -e "${GREEN}Service restarted successfully${NC}"
    fi
    check_status
}

# Show logs
show_logs() {
    if [[ -f $LOGS_FILE ]]; then
        tail -n 50 $LOGS_FILE
    else
        echo -e "${RED}Log file not found!${NC}"
    fi
}

# Change port
change_port() {
    read -p "Enter new port (1-65535): " new_port
    if [[ $new_port =~ ^[0-9]+$ ]] && [ $new_port -ge 1 ] && [ $new_port -le 65535 ]; then
        sed -i "s/\"listen\": \":[0-9]*\"/\"listen\": \":$new_port\"/" $CONFIG_DIR/config.json
        restart_service
        echo -e "${GREEN}Port changed to $new_port${NC}"
    else
        echo -e "${RED}Invalid port number!${NC}"
    fi
}

# Main menu
show_menu() {
    show_banner
    echo -e ""
    echo -e " ${GREEN}[1]${NC} • Start Service"
    echo -e " ${GREEN}[2]${NC} • Stop Service"
    echo -e " ${GREEN}[3]${NC} • Restart Service"
    echo -e " ${GREEN}[4]${NC} • Show Status"
    echo -e " ${GREEN}[5]${NC} • Show Logs"
    echo -e " ${GREEN}[6]${NC} • Change Port"
    echo -e " ${GREEN}[0]${NC} • Exit"
    echo -e ""
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e ""
}

# Main function
main() {
    check_root
    while true; do
        show_menu
        read -p "Select menu: " choice
        case $choice in
            1) start_service ;;
            2) stop_service ;;
            3) restart_service ;;
            4) check_status ;;
            5) show_logs ;;
            6) change_port ;;
            0) exit 0 ;;
            *) echo -e "${RED}Invalid option!${NC}" ;;
        esac
        echo ""
        read -p "Press enter to continue..."
    done
}

# Execute main function
main
